{"version":3,"file":"useReadPersonalData.js","sourceRoot":"","sources":["../src/useReadPersonalData.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EACL,sBAAsB,EACtB,YAAY,GAGb,MAAM,wBAAwB,CAAC;AAEhC,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACnC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAS;QACzC,KAAK,EAAE,MAAM;QACb,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,EAAE;KACV,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY;YAAE,OAAO;QAC1B,iCAAiC;QACjC,MAAM,YAAY,GAAG,YAAY,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,KAAK,EAAE,EAAE;YACxE,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;YACrC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,iDAAiD;QACpE,CAAC,CAAC,CAAC;QAEH,iDAAiD;QACjD,OAAO,GAAG,EAAE;YACV,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,MAAM,gBAAgB,GAAG,CAAC,EACxB,GAAG,EACH,GAAG,EACH,uBAAuB,GACC,EAAE,EAAE;QAC5B,sBAAsB,CAAC;YACrB,GAAG;YACH,GAAG;YACH,uBAAuB;SACxB,CAAC;aACC,IAAI,CAAC,CAAC,MAAc,EAAE,EAAE;YACvB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,4BAA4B;YAC5C,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACzB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAc,EAAE,EAAE;YACxB,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC;AAC1C,CAAC,CAAC","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n  readPersonalDataNative,\n  eventEmitter,\n  PState,\n  ReadPersonalDataOptions,\n} from \"./RNNFCLoginController\";\n\nexport const useReadPersonalData = () => {\n  const [res, setRes] = useState(\"\");\n  const [state, setState] = useState<PState>({\n    state: \"idle\",\n    value: false,\n    error: \"\",\n  });\n\n  useEffect(() => {\n    if (!eventEmitter) return;\n    // Subscribe to the event emitter\n    const subscription = eventEmitter.addListener(\"onStatusChange\", (event) => {\n      console.log(\"State updated:\", event);\n      setState(event); // Update the local state with the received event\n    });\n\n    // Clean up the subscription on component unmount\n    return () => {\n      subscription.remove();\n    };\n  }, [eventEmitter]);\n\n  const readPersonalData = ({\n    can,\n    pin,\n    checkBrainpoolAlgorithm,\n  }: ReadPersonalDataOptions) => {\n    readPersonalDataNative({\n      can,\n      pin,\n      checkBrainpoolAlgorithm,\n    })\n      .then((result: string) => {\n        setRes(result); // Store the result in state\n        console.log(\"success\");\n      })\n      .catch((error: unknown) => {\n        console.error(\"error\", error);\n      });\n  };\n\n  return { res, state, readPersonalData };\n};\n"]}